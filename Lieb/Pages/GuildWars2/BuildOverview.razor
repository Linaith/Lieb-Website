@page "/buildoverview"
@using Lieb.Data
@using Lieb.Models.GuildWars2
@inject GuildWars2BuildService GuildWars2BuildService


<h3>Build Overview</h3>


<AuthorizeView Policy="@Constants.Roles.Admin.Name">
    <Authorized>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="buildedit">
                <span class="oi oi-plus" aria-hidden="true"></span> Add Build
            </NavLink>
        </div>
    </Authorized>
</AuthorizeView>
            
    <label>
        Filter:
        <select @onchange="args => ChangeFilter(args)" >
            <option value="All">All</option>
            @foreach(GuildWars2Class gw2Class in Enum.GetValues(typeof(GuildWars2Class)))
            {
                <option value="@gw2Class">@gw2Class.ToString()</option>
            }
        </select>
    </label>

        <table class="roletable">
        <tr>
            <th>Name</th>
            <th>Class</th>
            <th>Elite</th>
            <th>Might</th>
            <th>Quick</th>
            <th>Alac</th>
            <th>Heal</th>
            <th>Power</th>
            <th>Condition</th>
            <th>Hybrid</th>
            <th>Other</th>
            <th>Random</th>
            <th>Source</th>
        </tr>
        @foreach (var build in _buildsToShow.OrderBy(b => b.Class).ThenBy(b => b.EliteSpecialization))
        {
            <tr>    
                
                <AuthorizeView Policy="@Constants.Roles.Admin.Name">
                    <Authorized>
                        <td class="nav-item px-3">
                            @{string navLink = $"buildedit/{@build.GuildWars2BuildId}";}
                            <NavLink class="nav-link" href="@navLink">@build.BuildName</NavLink>
                        </td>
                    </Authorized>
                    <NotAuthorized>
                        <td class="nav-item px-3">
                            <label style="padding: .5rem 1rem;">@build.BuildName</label>
                        </td>
                    </NotAuthorized>
                </AuthorizeView>

                <td>@build.Class.ToString()</td>
                <td>@build.EliteSpecialization.ToString()</td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.Might)" disabled="disabled" /></td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.Quickness)" disabled="disabled" /></td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.Alacrity)" disabled="disabled" /></td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.DamageType == DamageType.Heal)" disabled="disabled" /></td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.DamageType == DamageType.Power)" disabled="disabled" /></td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.DamageType == DamageType.Condition)" disabled="disabled" /></td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.DamageType == DamageType.Hybrid)" disabled="disabled" /></td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.DamageType == DamageType.Other)" disabled="disabled" /></td>
                <td class="checkboxfield"><input type="checkbox" checked="@(build.UseInRandomRaid)" disabled="disabled" /></td>
                @if(string.IsNullOrEmpty(build.SourceLink))
                {
                    <td>@build.Source</td>
                }
                else
                {
                    <NavLink class="nav-link" href="@build.SourceLink" target="blank">@build.Source</NavLink>
                }
            </tr>
        }
    </table> 

@code 
{
    private List<GuildWars2Build> _builds;
    private List<GuildWars2Build> _buildsToShow;

    protected override async Task OnInitializedAsync()
    {
        _builds = GuildWars2BuildService.GetBuilds();
        _buildsToShow = _builds;
    }

    private void ChangeFilter( ChangeEventArgs e)
    {
        if(Enum.TryParse<GuildWars2Class>(e.Value?.ToString(),out GuildWars2Class selectedClass))
        {
            _buildsToShow = _builds.Where(b => b.Class == selectedClass).ToList();
        }
        else
        {
            _buildsToShow = _builds;
        }
    }
}
