@using Lieb.Data
@using Lieb.Models
@using Lieb.Models.GuildWars2.Raid
@inject RaidService RaidService

<table class="table">
    <tbody>
         @{
            RaidSignUp userRole = _raid.SignUps.Where(s => s.LiebUserId == _user.LiebUserId).FirstOrDefault();
            bool isSignedUp = userRole != null;
         }
        @foreach (var role in _raid.Roles)
        {
            RaidSignUp[] signUps = _raid.SignUps.Where(s => s.PlannedRaidRoleId == role.PlannedRaidRoleId).ToArray();
            int usedSpots = signUps.Where(s => s.SignUpType == SignUpType.SignedUp).Count();

            <tr>
                @if (RaidService.IsRoleSignUpAllowed(_raid.RaidId, _user.LiebUserId, role.PlannedRaidRoleId, SignUpType.SignedUp, false))
                {
                    <td><button @onclick="() => SignUpClicked(role, _user, isSignedUp, SignUpType.SignedUp)">Sign Up</button></td>
                    <td><button @onclick="() => SignUpClicked(role, _user, isSignedUp, SignUpType.Maybe)">Maybe</button></td>
                }
                else
                {
                    <td></td>
                    <td></td>
                }
                <td><button @onclick="() => SignUpClicked(role, _user, isSignedUp, SignUpType.Backup)">Backup</button></td>
                @if (isSignedUp && userRole.SignUpType != SignUpType.SignedOff)
                {
                    <td><button @onclick="() => SignUpClicked(role, _user, isSignedUp, SignUpType.Flex)">Flex</button></td>
                }
                <td><h5>@role.Name: @role.Description (@usedSpots /@role.Spots)</h5></td>
            </tr>

            @foreach (var signUp in signUps)
            {
                @if(signUp.SignUpType != SignUpType.SignedOff)
                {
                    <tr>
                        @{bool isUser = isSignedUp && userRole.PlannedRaidRole.PlannedRaidRoleId == role.PlannedRaidRoleId && signUp.LiebUserId == _user.LiebUserId;}
                        <td></td>
                        <td></td>
                        @if (isSignedUp && userRole.SignUpType != SignUpType.SignedOff)
                        {
                            <td></td>
                        }
                        @if(isUser)
                        {
                            <td><button @onclick="() => SignOffClicked(role, _user)">Sign Off</button></td>
                        }
                        else
                        {
                            <td></td>
                        }
                        @{string signUpStatus = string.Empty;}
                        @if (signUp.SignUpType != SignUpType.SignedUp) signUpStatus = $" - {signUp.SignUpType}";

                        @if (isUser)
                        {
                            <td>@signUp.LiebUser.Name 
                            <select value=@signUp.GuildWars2AccountId @onchange="args => ChangeAccount(_user, args)">
                                @foreach (var account in _user.GuildWars2Accounts)
                                {
                                    <option value=@account.GuildWars2AccountId>@account.AccountName</option>
                                }
                            </select> @signUpStatus </td>
                        }
                        else
                        {
                            <td>@signUp.LiebUser.Name (@signUp.GuildWars2Account.AccountName) @signUpStatus</td> 
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>


@code {

    [Parameter]
    public Raid _raid { get; set; }

    [Parameter]
    public LiebUser _user { get; set; }

    async Task SignUpClicked(PlannedRaidRole role, LiebUser liebUser, bool isSignedUp, SignUpType signUpType)
    {
        if(isSignedUp && signUpType != SignUpType.Flex)
        {
            await RaidService.ChangeSignUpType(_raid.RaidId, liebUser.LiebUserId, role.PlannedRaidRoleId, signUpType);
        }
        else
        {
            await RaidService.SignUp(_raid.RaidId, liebUser.LiebUserId, liebUser.GuildWars2Accounts.FirstOrDefault().GuildWars2AccountId, role.PlannedRaidRoleId, signUpType);
        }
        _raid = RaidService.GetRaid(_raid.RaidId);
    }

    async Task SignOffClicked(PlannedRaidRole role, LiebUser liebUser)
    {
        await RaidService.SignOff(_raid.RaidId, liebUser.LiebUserId, role.PlannedRaidRoleId);
        _raid = RaidService.GetRaid(_raid.RaidId);
    }

    async Task ChangeAccount(LiebUser liebUser, ChangeEventArgs e)
    {
        int accountId = int.Parse(e.Value.ToString());
        await RaidService.ChangeAccount(_raid.RaidId, liebUser.LiebUserId, accountId);
        _raid = RaidService.GetRaid(_raid.RaidId);
    }
}
